type token =
  | IMPL
  | AND
  | OR
  | NOT
  | EQ
  | LEQ
  | GEQ
  | GT
  | LT
  | NEQ
  | INT of (int)
  | ID of (string)
  | MINUS
  | PLUS
  | TIMES
  | DIV
  | EOF
  | LPAREN
  | RPAREN
  | TRUE
  | FALSE
  | NU
  | SEMICOLON

open Parsing;;
let _ = parse_error;;
# 2 "Qualparser.mly"
  open Data.Objt
  open Data.Cond
  open Data.Type
  open Data.Op
# 34 "Qualparser.ml"
let yytransl_const = [|
  257 (* IMPL *);
  258 (* AND *);
  259 (* OR *);
  260 (* NOT *);
  261 (* EQ *);
  262 (* LEQ *);
  263 (* GEQ *);
  264 (* GT *);
  265 (* LT *);
  266 (* NEQ *);
  269 (* MINUS *);
  270 (* PLUS *);
  271 (* TIMES *);
  272 (* DIV *);
    0 (* EOF *);
  273 (* LPAREN *);
  274 (* RPAREN *);
  275 (* TRUE *);
  276 (* FALSE *);
  277 (* NU *);
  278 (* SEMICOLON *);
    0|]

let yytransl_block = [|
  267 (* INT *);
  268 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\003\000\000\000"

let yylen = "\002\000\
\001\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\023\000\022\000\000\000\001\000\000\000\
\024\000\025\000\021\000\026\000\000\000\020\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\000\008\000\003\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000"

let yysindex = "\255\255\
\128\000\000\000\041\255\000\000\000\000\041\255\000\000\041\255\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\243\254\
\033\255\041\255\041\255\041\255\041\255\041\255\041\255\041\255\
\041\255\041\255\041\255\041\255\041\255\041\255\000\000\128\000\
\000\000\087\255\058\255\058\255\000\255\000\255\000\255\000\255\
\000\255\000\255\243\254\243\254\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\069\000\077\000\080\000\083\000\091\000\105\000\
\113\000\116\000\037\000\055\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\228\255\002\000\000\000"

let yytablesize = 405
let yytable = "\001\000\
\031\000\029\000\030\000\047\000\015\000\000\000\000\000\016\000\
\000\000\017\000\000\000\017\000\027\000\028\000\029\000\030\000\
\000\000\000\000\018\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\000\000\018\000\019\000\020\000\006\000\021\000\022\000\023\000\
\024\000\025\000\026\000\000\000\003\000\027\000\028\000\029\000\
\030\000\000\000\033\000\004\000\005\000\006\000\005\000\000\000\
\000\000\008\000\000\000\009\000\010\000\011\000\021\000\022\000\
\023\000\024\000\025\000\026\000\015\000\000\000\027\000\028\000\
\029\000\030\000\000\000\000\000\016\000\000\000\000\000\009\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\018\000\
\019\000\020\000\013\000\021\000\022\000\023\000\024\000\025\000\
\026\000\000\000\000\000\027\000\028\000\029\000\030\000\000\000\
\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\019\000\020\000\000\000\021\000\022\000\023\000\
\024\000\025\000\026\000\000\000\000\000\027\000\028\000\029\000\
\030\000\000\000\000\000\018\000\018\000\018\000\032\000\018\000\
\018\000\018\000\018\000\018\000\018\000\017\000\000\000\018\000\
\018\000\017\000\000\000\000\000\018\000\006\000\006\000\006\000\
\018\000\006\000\006\000\006\000\006\000\006\000\006\000\000\000\
\000\000\006\000\006\000\000\000\000\000\000\000\006\000\005\000\
\005\000\005\000\006\000\005\000\005\000\005\000\005\000\005\000\
\005\000\000\000\000\000\005\000\005\000\015\000\015\000\015\000\
\005\000\000\000\000\000\000\000\005\000\016\000\016\000\016\000\
\009\000\009\000\009\000\011\000\011\000\011\000\015\000\000\000\
\000\000\000\000\015\000\013\000\013\000\013\000\016\000\000\000\
\000\000\009\000\016\000\000\000\011\000\009\000\000\000\000\000\
\011\000\014\000\014\000\014\000\013\000\000\000\000\000\000\000\
\013\000\012\000\012\000\012\000\010\000\010\000\010\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\014\000\000\000\
\000\000\000\000\012\000\003\000\000\000\010\000\012\000\000\000\
\000\000\010\000\004\000\005\000\006\000\000\000\000\000\000\000\
\008\000\000\000\009\000\010\000\011\000"

let yycheck = "\001\000\
\000\000\015\001\016\001\032\000\003\000\255\255\255\255\006\000\
\255\255\008\000\255\255\000\000\013\001\014\001\015\001\016\001\
\255\255\255\255\000\000\018\000\019\000\020\000\021\000\022\000\
\023\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\004\001\013\001\014\001\015\001\
\016\001\255\255\018\001\011\001\012\001\013\001\000\000\255\255\
\255\255\017\001\255\255\019\001\020\001\021\001\005\001\006\001\
\007\001\008\001\009\001\010\001\000\000\255\255\013\001\014\001\
\015\001\016\001\255\255\255\255\000\000\255\255\255\255\000\000\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\015\001\016\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\255\255\013\001\014\001\015\001\
\016\001\255\255\255\255\001\001\002\001\003\001\022\001\005\001\
\006\001\007\001\008\001\009\001\010\001\018\001\255\255\013\001\
\014\001\022\001\255\255\255\255\018\001\001\001\002\001\003\001\
\022\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\255\255\013\001\014\001\255\255\255\255\255\255\018\001\001\001\
\002\001\003\001\022\001\005\001\006\001\007\001\008\001\009\001\
\010\001\255\255\255\255\013\001\014\001\001\001\002\001\003\001\
\018\001\255\255\255\255\255\255\022\001\001\001\002\001\003\001\
\001\001\002\001\003\001\001\001\002\001\003\001\018\001\255\255\
\255\255\255\255\022\001\001\001\002\001\003\001\018\001\255\255\
\255\255\018\001\022\001\255\255\018\001\022\001\255\255\255\255\
\022\001\001\001\002\001\003\001\018\001\255\255\255\255\255\255\
\022\001\001\001\002\001\003\001\001\001\002\001\003\001\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\018\001\004\001\255\255\018\001\022\001\255\255\
\255\255\022\001\011\001\012\001\013\001\255\255\255\255\255\255\
\017\001\255\255\019\001\020\001\021\001"

let yynames_const = "\
  IMPL\000\
  AND\000\
  OR\000\
  NOT\000\
  EQ\000\
  LEQ\000\
  GEQ\000\
  GT\000\
  LT\000\
  NEQ\000\
  MINUS\000\
  PLUS\000\
  TIMES\000\
  DIV\000\
  EOF\000\
  LPAREN\000\
  RPAREN\000\
  TRUE\000\
  FALSE\000\
  NU\000\
  SEMICOLON\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "Qualparser.mly"
        ( [] )
# 248 "Qualparser.ml"
               : Data.Cond.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'condition) in
    Obj.repr(
# 36 "Qualparser.mly"
                  ( [_1] )
# 255 "Qualparser.ml"
               : Data.Cond.t list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Data.Cond.t list) in
    Obj.repr(
# 37 "Qualparser.mly"
                             ( _1 :: _3 )
# 263 "Qualparser.ml"
               : Data.Cond.t list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'condition) in
    Obj.repr(
# 40 "Qualparser.mly"
                                  ( _2 )
# 270 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 41 "Qualparser.mly"
                                  ( Op2(_1, Plus , _3) )
# 278 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 42 "Qualparser.mly"
                                  ( Op2(_1, Minus, _3) )
# 286 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 43 "Qualparser.mly"
                                  ( Op2(_1, Times, _3) )
# 294 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 44 "Qualparser.mly"
                                  ( Op2(_1, Div  , _3) )
# 302 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 45 "Qualparser.mly"
                                  ( Op2(_1, Eq   , _3) )
# 310 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 46 "Qualparser.mly"
                                  ( Op2(_1, Neq  , _3) )
# 318 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 47 "Qualparser.mly"
                                  ( Op2(_1, Leq  , _3) )
# 326 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 48 "Qualparser.mly"
                                  ( Op2(_1, Lt   , _3) )
# 334 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 49 "Qualparser.mly"
                                  ( Op2(_1, Geq  , _3) )
# 342 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 50 "Qualparser.mly"
                                  ( Op2(_1, Gt   , _3) )
# 350 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 51 "Qualparser.mly"
                                  ( Op2(_1, And_, _3) )
# 358 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 52 "Qualparser.mly"
                                  ( Op2(_1, Or_, _3) )
# 366 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'condition) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 53 "Qualparser.mly"
                                 ( Op2(_1, Impl, _3) )
# 374 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 54 "Qualparser.mly"
                                  ( Op1(Minus, _2) )
# 381 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'condition) in
    Obj.repr(
# 55 "Qualparser.mly"
                                  ( Op1(Not_, _2) )
# 388 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 56 "Qualparser.mly"
                                  ( Value(_1) )
# 395 "Qualparser.ml"
               : 'condition))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "Qualparser.mly"
                       ( VarObj("V") )
# 401 "Qualparser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "Qualparser.mly"
                       ( VarObj(_1) )
# 408 "Qualparser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 62 "Qualparser.mly"
                       ( IntObj(_1) )
# 415 "Qualparser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "Qualparser.mly"
                       ( IntObj(1) )
# 421 "Qualparser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "Qualparser.mly"
                       ( IntObj(0) )
# 427 "Qualparser.ml"
               : 'value))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Data.Cond.t list)
